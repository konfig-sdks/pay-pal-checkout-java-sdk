/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Bank Identification Number (BIN) details used to fund a payment.
 */
@ApiModel(description = "Bank Identification Number (BIN) details used to fund a payment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BinDetails {
  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_ISSUING_BANK = "issuing_bank";
  @SerializedName(SERIALIZED_NAME_ISSUING_BANK)
  private String issuingBank;

  public static final String SERIALIZED_NAME_BIN_COUNTRY_CODE = "bin_country_code";
  @SerializedName(SERIALIZED_NAME_BIN_COUNTRY_CODE)
  private String binCountryCode;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<String> products = null;

  public BinDetails() {
  }

  public BinDetails bin(String bin) {
    
    
    if (bin != null && bin.length() < 1) {
      throw new IllegalArgumentException("Invalid value for bin. Length must be greater than or equal to 1.");
    }
    
    this.bin = bin;
    return this;
  }

   /**
   * The Bank Identification Number (BIN) signifies the number that is being used to identify the granular level details (except the PII information) of the card.
   * @return bin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Bank Identification Number (BIN) signifies the number that is being used to identify the granular level details (except the PII information) of the card.")

  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    
    
    if (bin != null && bin.length() < 1) {
      throw new IllegalArgumentException("Invalid value for bin. Length must be greater than or equal to 1.");
    }
    this.bin = bin;
  }


  public BinDetails issuingBank(String issuingBank) {
    
    
    if (issuingBank != null && issuingBank.length() < 1) {
      throw new IllegalArgumentException("Invalid value for issuingBank. Length must be greater than or equal to 1.");
    }
    
    this.issuingBank = issuingBank;
    return this;
  }

   /**
   * The issuer of the card instrument.
   * @return issuingBank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The issuer of the card instrument.")

  public String getIssuingBank() {
    return issuingBank;
  }


  public void setIssuingBank(String issuingBank) {
    
    
    if (issuingBank != null && issuingBank.length() < 1) {
      throw new IllegalArgumentException("Invalid value for issuingBank. Length must be greater than or equal to 1.");
    }
    this.issuingBank = issuingBank;
  }


  public BinDetails binCountryCode(String binCountryCode) {
    
    
    if (binCountryCode != null && binCountryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for binCountryCode. Length must be greater than or equal to 2.");
    }
    
    this.binCountryCode = binCountryCode;
    return this;
  }

   /**
   * The [two-character ISO 3166-1 code](https://raw.githubusercontent.com) that identifies the country or region.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The country code for Great Britain is &lt;code&gt;GB&lt;/code&gt; and not &lt;code&gt;UK&lt;/code&gt; as used in the top-level domain names for that country. Use the &#x60;C2&#x60; country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.&lt;/blockquote&gt;
   * @return binCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [two-character ISO 3166-1 code](https://raw.githubusercontent.com) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>")

  public String getBinCountryCode() {
    return binCountryCode;
  }


  public void setBinCountryCode(String binCountryCode) {
    
    
    if (binCountryCode != null && binCountryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for binCountryCode. Length must be greater than or equal to 2.");
    }
    this.binCountryCode = binCountryCode;
  }


  public BinDetails products(List<String> products) {
    
    
    
    
    this.products = products;
    return this;
  }

  public BinDetails addProductsItem(String productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * The type of card product assigned to the BIN by the issuer. These values are defined by the issuer and may change over time. Some examples include: PREPAID_GIFT, CONSUMER, CORPORATE.
   * @return products
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of card product assigned to the BIN by the issuer. These values are defined by the issuer and may change over time. Some examples include: PREPAID_GIFT, CONSUMER, CORPORATE.")

  public List<String> getProducts() {
    return products;
  }


  public void setProducts(List<String> products) {
    
    
    
    this.products = products;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BinDetails instance itself
   */
  public BinDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinDetails binDetails = (BinDetails) o;
    return Objects.equals(this.bin, binDetails.bin) &&
        Objects.equals(this.issuingBank, binDetails.issuingBank) &&
        Objects.equals(this.binCountryCode, binDetails.binCountryCode) &&
        Objects.equals(this.products, binDetails.products)&&
        Objects.equals(this.additionalProperties, binDetails.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bin, issuingBank, binCountryCode, products, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinDetails {\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    issuingBank: ").append(toIndentedString(issuingBank)).append("\n");
    sb.append("    binCountryCode: ").append(toIndentedString(binCountryCode)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bin");
    openapiFields.add("issuing_bank");
    openapiFields.add("bin_country_code");
    openapiFields.add("products");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BinDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BinDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BinDetails is not found in the empty JSON string", BinDetails.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if ((jsonObj.get("issuing_bank") != null && !jsonObj.get("issuing_bank").isJsonNull()) && !jsonObj.get("issuing_bank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuing_bank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuing_bank").toString()));
      }
      if ((jsonObj.get("bin_country_code") != null && !jsonObj.get("bin_country_code").isJsonNull()) && !jsonObj.get("bin_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin_country_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BinDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BinDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BinDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BinDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BinDetails>() {
           @Override
           public void write(JsonWriter out, BinDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BinDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BinDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BinDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BinDetails
  * @throws IOException if the JSON string is invalid with respect to BinDetails
  */
  public static BinDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BinDetails.class);
  }

 /**
  * Convert an instance of BinDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

