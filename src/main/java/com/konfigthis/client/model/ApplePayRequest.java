/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplePayDecryptedTokenData;
import com.konfigthis.client.model.CardStoredCredential;
import com.konfigthis.client.model.Phone;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information needed to pay using ApplePay.
 */
@ApiModel(description = "Information needed to pay using ApplePay.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplePayRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private Phone phoneNumber;

  public static final String SERIALIZED_NAME_DECRYPTED_TOKEN = "decrypted_token";
  @SerializedName(SERIALIZED_NAME_DECRYPTED_TOKEN)
  private ApplePayDecryptedTokenData decryptedToken;

  public static final String SERIALIZED_NAME_STORED_CREDENTIAL = "stored_credential";
  @SerializedName(SERIALIZED_NAME_STORED_CREDENTIAL)
  private CardStoredCredential storedCredential;

  public static final String SERIALIZED_NAME_VAULT_ID = "vault_id";
  @SerializedName(SERIALIZED_NAME_VAULT_ID)
  private String vaultId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Object attributes = null;

  public ApplePayRequest() {
  }

  public ApplePayRequest id(String id) {
    
    
    if (id != null && id.length() < 1) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * ApplePay transaction identifier, this will be the unique identifier for this transaction provided by Apple. The pattern is defined by an external party and supports Unicode.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ApplePay transaction identifier, this will be the unique identifier for this transaction provided by Apple. The pattern is defined by an external party and supports Unicode.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 1) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
    }
    this.id = id;
  }


  public ApplePayRequest name(String name) {
    
    
    if (name != null && name.length() < 3) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 3.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * The full name representation like Mr J Smith.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The full name representation like Mr J Smith.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 3) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 3.");
    }
    this.name = name;
  }


  public ApplePayRequest emailAddress(String emailAddress) {
    
    
    if (emailAddress != null && emailAddress.length() < 3) {
      throw new IllegalArgumentException("Invalid value for emailAddress. Length must be greater than or equal to 3.");
    }
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * The internationalized email address.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Up to 64 characters are allowed before and 255 characters are allowed after the &lt;code&gt;@&lt;/code&gt; sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted &lt;code&gt;@&lt;/code&gt; sign exists.&lt;/blockquote&gt;
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    
    
    if (emailAddress != null && emailAddress.length() < 3) {
      throw new IllegalArgumentException("Invalid value for emailAddress. Length must be greater than or equal to 3.");
    }
    this.emailAddress = emailAddress;
  }


  public ApplePayRequest phoneNumber(Phone phoneNumber) {
    
    
    
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Phone getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(Phone phoneNumber) {
    
    
    
    this.phoneNumber = phoneNumber;
  }


  public ApplePayRequest decryptedToken(ApplePayDecryptedTokenData decryptedToken) {
    
    
    
    
    this.decryptedToken = decryptedToken;
    return this;
  }

   /**
   * Get decryptedToken
   * @return decryptedToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplePayDecryptedTokenData getDecryptedToken() {
    return decryptedToken;
  }


  public void setDecryptedToken(ApplePayDecryptedTokenData decryptedToken) {
    
    
    
    this.decryptedToken = decryptedToken;
  }


  public ApplePayRequest storedCredential(CardStoredCredential storedCredential) {
    
    
    
    
    this.storedCredential = storedCredential;
    return this;
  }

   /**
   * Get storedCredential
   * @return storedCredential
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardStoredCredential getStoredCredential() {
    return storedCredential;
  }


  public void setStoredCredential(CardStoredCredential storedCredential) {
    
    
    
    this.storedCredential = storedCredential;
  }


  public ApplePayRequest vaultId(String vaultId) {
    
    
    if (vaultId != null && vaultId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for vaultId. Length must be greater than or equal to 1.");
    }
    
    this.vaultId = vaultId;
    return this;
  }

   /**
   * The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant&#39;s server so the saved payment source can be used for future transactions.
   * @return vaultId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.")

  public String getVaultId() {
    return vaultId;
  }


  public void setVaultId(String vaultId) {
    
    
    if (vaultId != null && vaultId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for vaultId. Length must be greater than or equal to 1.");
    }
    this.vaultId = vaultId;
  }


  public ApplePayRequest attributes(Object attributes) {
    
    
    
    
    this.attributes = attributes;
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAttributes() {
    return attributes;
  }


  public void setAttributes(Object attributes) {
    
    
    
    this.attributes = attributes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplePayRequest instance itself
   */
  public ApplePayRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplePayRequest applePayRequest = (ApplePayRequest) o;
    return Objects.equals(this.id, applePayRequest.id) &&
        Objects.equals(this.name, applePayRequest.name) &&
        Objects.equals(this.emailAddress, applePayRequest.emailAddress) &&
        Objects.equals(this.phoneNumber, applePayRequest.phoneNumber) &&
        Objects.equals(this.decryptedToken, applePayRequest.decryptedToken) &&
        Objects.equals(this.storedCredential, applePayRequest.storedCredential) &&
        Objects.equals(this.vaultId, applePayRequest.vaultId) &&
        Objects.equals(this.attributes, applePayRequest.attributes)&&
        Objects.equals(this.additionalProperties, applePayRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, emailAddress, phoneNumber, decryptedToken, storedCredential, vaultId, attributes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplePayRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    decryptedToken: ").append(toIndentedString(decryptedToken)).append("\n");
    sb.append("    storedCredential: ").append(toIndentedString(storedCredential)).append("\n");
    sb.append("    vaultId: ").append(toIndentedString(vaultId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("email_address");
    openapiFields.add("phone_number");
    openapiFields.add("decrypted_token");
    openapiFields.add("stored_credential");
    openapiFields.add("vault_id");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplePayRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplePayRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplePayRequest is not found in the empty JSON string", ApplePayRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonNull()) && !jsonObj.get("email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      // validate the optional field `phone_number`
      if (jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) {
        Phone.validateJsonObject(jsonObj.getAsJsonObject("phone_number"));
      }
      // validate the optional field `decrypted_token`
      if (jsonObj.get("decrypted_token") != null && !jsonObj.get("decrypted_token").isJsonNull()) {
        ApplePayDecryptedTokenData.validateJsonObject(jsonObj.getAsJsonObject("decrypted_token"));
      }
      // validate the optional field `stored_credential`
      if (jsonObj.get("stored_credential") != null && !jsonObj.get("stored_credential").isJsonNull()) {
        CardStoredCredential.validateJsonObject(jsonObj.getAsJsonObject("stored_credential"));
      }
      if ((jsonObj.get("vault_id") != null && !jsonObj.get("vault_id").isJsonNull()) && !jsonObj.get("vault_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vault_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplePayRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplePayRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplePayRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplePayRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplePayRequest>() {
           @Override
           public void write(JsonWriter out, ApplePayRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplePayRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplePayRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplePayRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplePayRequest
  * @throws IOException if the JSON string is invalid with respect to ApplePayRequest
  */
  public static ApplePayRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplePayRequest.class);
  }

 /**
  * Convert an instance of ApplePayRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

