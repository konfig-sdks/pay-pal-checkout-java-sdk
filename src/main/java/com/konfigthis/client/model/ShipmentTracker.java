/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ShipmentCarrier;
import com.konfigthis.client.model.ShipmentTrackingNumberType;
import com.konfigthis.client.model.ShipmentTrackingStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The tracking information for a shipment.
 */
@ApiModel(description = "The tracking information for a shipment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShipmentTracker {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER_TYPE = "tracking_number_type";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER_TYPE)
  private ShipmentTrackingNumberType trackingNumberType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ShipmentTrackingStatus status;

  public static final String SERIALIZED_NAME_SHIPMENT_DATE = "shipment_date";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_DATE)
  private String shipmentDate;

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private ShipmentCarrier carrier;

  public static final String SERIALIZED_NAME_CARRIER_NAME_OTHER = "carrier_name_other";
  @SerializedName(SERIALIZED_NAME_CARRIER_NAME_OTHER)
  private String carrierNameOther;

  public static final String SERIALIZED_NAME_POSTAGE_PAYMENT_ID = "postage_payment_id";
  @SerializedName(SERIALIZED_NAME_POSTAGE_PAYMENT_ID)
  private String postagePaymentId;

  public static final String SERIALIZED_NAME_NOTIFY_BUYER = "notify_buyer";
  @SerializedName(SERIALIZED_NAME_NOTIFY_BUYER)
  private Boolean notifyBuyer = false;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER_VALIDATED = "tracking_number_validated";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER_VALIDATED)
  private Boolean trackingNumberValidated;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "last_updated_time";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private String lastUpdatedTime;

  /**
   * To denote whether the shipment is sent forward to the receiver or returned back.
   */
  @JsonAdapter(ShipmentDirectionEnum.Adapter.class)
 public enum ShipmentDirectionEnum {
    FORWARD("FORWARD"),
    
    RETURN("RETURN");

    private String value;

    ShipmentDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShipmentDirectionEnum fromValue(String value) {
      for (ShipmentDirectionEnum b : ShipmentDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShipmentDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShipmentDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShipmentDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShipmentDirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHIPMENT_DIRECTION = "shipment_direction";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_DIRECTION)
  private ShipmentDirectionEnum shipmentDirection;

  /**
   * To denote which party uploaded the shipment tracking info.
   */
  @JsonAdapter(ShipmentUploaderEnum.Adapter.class)
 public enum ShipmentUploaderEnum {
    MERCHANT("MERCHANT"),
    
    CONSUMER("CONSUMER"),
    
    PARTNER("PARTNER");

    private String value;

    ShipmentUploaderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShipmentUploaderEnum fromValue(String value) {
      for (ShipmentUploaderEnum b : ShipmentUploaderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShipmentUploaderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShipmentUploaderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShipmentUploaderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShipmentUploaderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHIPMENT_UPLOADER = "shipment_uploader";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_UPLOADER)
  private ShipmentUploaderEnum shipmentUploader;

  public ShipmentTracker() {
  }

  
  public ShipmentTracker(
     String postagePaymentId, 
     Integer quantity, 
     Boolean trackingNumberValidated, 
     ShipmentUploaderEnum shipmentUploader
  ) {
    this();
    this.postagePaymentId = postagePaymentId;
    this.quantity = quantity;
    this.trackingNumberValidated = trackingNumberValidated;
    this.shipmentUploader = shipmentUploader;
  }

  public ShipmentTracker transactionId(String transactionId) {
    
    
    if (transactionId != null && transactionId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for transactionId. Length must be greater than or equal to 1.");
    }
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The PayPal transaction ID.
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The PayPal transaction ID.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    
    
    if (transactionId != null && transactionId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for transactionId. Length must be greater than or equal to 1.");
    }
    this.transactionId = transactionId;
  }


  public ShipmentTracker trackingNumber(String trackingNumber) {
    
    
    if (trackingNumber != null && trackingNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for trackingNumber. Length must be greater than or equal to 1.");
    }
    
    this.trackingNumber = trackingNumber;
    return this;
  }

   /**
   * The tracking number for the shipment. This property supports Unicode.
   * @return trackingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tracking number for the shipment. This property supports Unicode.")

  public String getTrackingNumber() {
    return trackingNumber;
  }


  public void setTrackingNumber(String trackingNumber) {
    
    
    if (trackingNumber != null && trackingNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for trackingNumber. Length must be greater than or equal to 1.");
    }
    this.trackingNumber = trackingNumber;
  }


  public ShipmentTracker trackingNumberType(ShipmentTrackingNumberType trackingNumberType) {
    
    
    
    
    this.trackingNumberType = trackingNumberType;
    return this;
  }

   /**
   * Get trackingNumberType
   * @return trackingNumberType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShipmentTrackingNumberType getTrackingNumberType() {
    return trackingNumberType;
  }


  public void setTrackingNumberType(ShipmentTrackingNumberType trackingNumberType) {
    
    
    
    this.trackingNumberType = trackingNumberType;
  }


  public ShipmentTracker status(ShipmentTrackingStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ShipmentTrackingStatus getStatus() {
    return status;
  }


  public void setStatus(ShipmentTrackingStatus status) {
    
    
    
    this.status = status;
  }


  public ShipmentTracker shipmentDate(String shipmentDate) {
    
    
    if (shipmentDate != null && shipmentDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for shipmentDate. Length must be greater than or equal to 10.");
    }
    
    this.shipmentDate = shipmentDate;
    return this;
  }

   /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @return shipmentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.")

  public String getShipmentDate() {
    return shipmentDate;
  }


  public void setShipmentDate(String shipmentDate) {
    
    
    if (shipmentDate != null && shipmentDate.length() < 10) {
      throw new IllegalArgumentException("Invalid value for shipmentDate. Length must be greater than or equal to 10.");
    }
    this.shipmentDate = shipmentDate;
  }


  public ShipmentTracker carrier(ShipmentCarrier carrier) {
    
    
    
    
    this.carrier = carrier;
    return this;
  }

   /**
   * Get carrier
   * @return carrier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShipmentCarrier getCarrier() {
    return carrier;
  }


  public void setCarrier(ShipmentCarrier carrier) {
    
    
    
    this.carrier = carrier;
  }


  public ShipmentTracker carrierNameOther(String carrierNameOther) {
    
    
    if (carrierNameOther != null && carrierNameOther.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierNameOther. Length must be greater than or equal to 1.");
    }
    
    this.carrierNameOther = carrierNameOther;
    return this;
  }

   /**
   * The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.
   * @return carrierNameOther
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.")

  public String getCarrierNameOther() {
    return carrierNameOther;
  }


  public void setCarrierNameOther(String carrierNameOther) {
    
    
    if (carrierNameOther != null && carrierNameOther.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierNameOther. Length must be greater than or equal to 1.");
    }
    this.carrierNameOther = carrierNameOther;
  }


   /**
   * The postage payment ID. This property supports Unicode.
   * @return postagePaymentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The postage payment ID. This property supports Unicode.")

  public String getPostagePaymentId() {
    return postagePaymentId;
  }




  public ShipmentTracker notifyBuyer(Boolean notifyBuyer) {
    
    
    
    
    this.notifyBuyer = notifyBuyer;
    return this;
  }

   /**
   * If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   * @return notifyBuyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.")

  public Boolean getNotifyBuyer() {
    return notifyBuyer;
  }


  public void setNotifyBuyer(Boolean notifyBuyer) {
    
    
    
    this.notifyBuyer = notifyBuyer;
  }


   /**
   * The quantity of items shipped.
   * minimum: 1
   * maximum: 100
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity of items shipped.")

  public Integer getQuantity() {
    return quantity;
  }




   /**
   * Indicates whether the carrier validated the tracking number.
   * @return trackingNumberValidated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the carrier validated the tracking number.")

  public Boolean getTrackingNumberValidated() {
    return trackingNumberValidated;
  }




  public ShipmentTracker lastUpdatedTime(String lastUpdatedTime) {
    
    
    if (lastUpdatedTime != null && lastUpdatedTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for lastUpdatedTime. Length must be greater than or equal to 20.");
    }
    
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

   /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt;
   * @return lastUpdatedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>")

  public String getLastUpdatedTime() {
    return lastUpdatedTime;
  }


  public void setLastUpdatedTime(String lastUpdatedTime) {
    
    
    if (lastUpdatedTime != null && lastUpdatedTime.length() < 20) {
      throw new IllegalArgumentException("Invalid value for lastUpdatedTime. Length must be greater than or equal to 20.");
    }
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public ShipmentTracker shipmentDirection(ShipmentDirectionEnum shipmentDirection) {
    
    
    if (shipmentDirection != null && shipmentDirection.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shipmentDirection. Length must be greater than or equal to 1.");
    }
    
    this.shipmentDirection = shipmentDirection;
    return this;
  }

   /**
   * To denote whether the shipment is sent forward to the receiver or returned back.
   * @return shipmentDirection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "To denote whether the shipment is sent forward to the receiver or returned back.")

  public ShipmentDirectionEnum getShipmentDirection() {
    return shipmentDirection;
  }


  public void setShipmentDirection(ShipmentDirectionEnum shipmentDirection) {
    
    
    if (shipmentDirection != null && shipmentDirection.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shipmentDirection. Length must be greater than or equal to 1.");
    }
    this.shipmentDirection = shipmentDirection;
  }


   /**
   * To denote which party uploaded the shipment tracking info.
   * @return shipmentUploader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "To denote which party uploaded the shipment tracking info.")

  public ShipmentUploaderEnum getShipmentUploader() {
    return shipmentUploader;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShipmentTracker instance itself
   */
  public ShipmentTracker putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentTracker shipmentTracker = (ShipmentTracker) o;
    return Objects.equals(this.transactionId, shipmentTracker.transactionId) &&
        Objects.equals(this.trackingNumber, shipmentTracker.trackingNumber) &&
        Objects.equals(this.trackingNumberType, shipmentTracker.trackingNumberType) &&
        Objects.equals(this.status, shipmentTracker.status) &&
        Objects.equals(this.shipmentDate, shipmentTracker.shipmentDate) &&
        Objects.equals(this.carrier, shipmentTracker.carrier) &&
        Objects.equals(this.carrierNameOther, shipmentTracker.carrierNameOther) &&
        Objects.equals(this.postagePaymentId, shipmentTracker.postagePaymentId) &&
        Objects.equals(this.notifyBuyer, shipmentTracker.notifyBuyer) &&
        Objects.equals(this.quantity, shipmentTracker.quantity) &&
        Objects.equals(this.trackingNumberValidated, shipmentTracker.trackingNumberValidated) &&
        Objects.equals(this.lastUpdatedTime, shipmentTracker.lastUpdatedTime) &&
        Objects.equals(this.shipmentDirection, shipmentTracker.shipmentDirection) &&
        Objects.equals(this.shipmentUploader, shipmentTracker.shipmentUploader)&&
        Objects.equals(this.additionalProperties, shipmentTracker.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, trackingNumber, trackingNumberType, status, shipmentDate, carrier, carrierNameOther, postagePaymentId, notifyBuyer, quantity, trackingNumberValidated, lastUpdatedTime, shipmentDirection, shipmentUploader, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentTracker {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    trackingNumberType: ").append(toIndentedString(trackingNumberType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    shipmentDate: ").append(toIndentedString(shipmentDate)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    carrierNameOther: ").append(toIndentedString(carrierNameOther)).append("\n");
    sb.append("    postagePaymentId: ").append(toIndentedString(postagePaymentId)).append("\n");
    sb.append("    notifyBuyer: ").append(toIndentedString(notifyBuyer)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    trackingNumberValidated: ").append(toIndentedString(trackingNumberValidated)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    shipmentDirection: ").append(toIndentedString(shipmentDirection)).append("\n");
    sb.append("    shipmentUploader: ").append(toIndentedString(shipmentUploader)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_id");
    openapiFields.add("tracking_number");
    openapiFields.add("tracking_number_type");
    openapiFields.add("status");
    openapiFields.add("shipment_date");
    openapiFields.add("carrier");
    openapiFields.add("carrier_name_other");
    openapiFields.add("postage_payment_id");
    openapiFields.add("notify_buyer");
    openapiFields.add("quantity");
    openapiFields.add("tracking_number_validated");
    openapiFields.add("last_updated_time");
    openapiFields.add("shipment_direction");
    openapiFields.add("shipment_uploader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipmentTracker
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShipmentTracker.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentTracker is not found in the empty JSON string", ShipmentTracker.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShipmentTracker.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if ((jsonObj.get("tracking_number") != null && !jsonObj.get("tracking_number").isJsonNull()) && !jsonObj.get("tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
      }
      if ((jsonObj.get("shipment_date") != null && !jsonObj.get("shipment_date").isJsonNull()) && !jsonObj.get("shipment_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_date").toString()));
      }
      if ((jsonObj.get("carrier_name_other") != null && !jsonObj.get("carrier_name_other").isJsonNull()) && !jsonObj.get("carrier_name_other").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_name_other` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_name_other").toString()));
      }
      if ((jsonObj.get("postage_payment_id") != null && !jsonObj.get("postage_payment_id").isJsonNull()) && !jsonObj.get("postage_payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postage_payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postage_payment_id").toString()));
      }
      if ((jsonObj.get("last_updated_time") != null && !jsonObj.get("last_updated_time").isJsonNull()) && !jsonObj.get("last_updated_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated_time").toString()));
      }
      if ((jsonObj.get("shipment_direction") != null && !jsonObj.get("shipment_direction").isJsonNull()) && !jsonObj.get("shipment_direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_direction").toString()));
      }
      if ((jsonObj.get("shipment_uploader") != null && !jsonObj.get("shipment_uploader").isJsonNull()) && !jsonObj.get("shipment_uploader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_uploader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_uploader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentTracker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentTracker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentTracker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentTracker.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentTracker>() {
           @Override
           public void write(JsonWriter out, ShipmentTracker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentTracker read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShipmentTracker instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShipmentTracker given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipmentTracker
  * @throws IOException if the JSON string is invalid with respect to ShipmentTracker
  */
  public static ShipmentTracker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentTracker.class);
  }

 /**
  * Convert an instance of ShipmentTracker to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

