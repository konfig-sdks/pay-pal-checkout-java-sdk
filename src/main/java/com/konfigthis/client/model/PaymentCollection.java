/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AuthorizationWithAdditionalData;
import com.konfigthis.client.model.Capture;
import com.konfigthis.client.model.Refund;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The collection of payments, or transactions, for a purchase unit in an order. For example, authorized payments, captured payments, and refunds.
 */
@ApiModel(description = "The collection of payments, or transactions, for a purchase unit in an order. For example, authorized payments, captured payments, and refunds.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentCollection {
  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private List<AuthorizationWithAdditionalData> authorizations = null;

  public static final String SERIALIZED_NAME_CAPTURES = "captures";
  @SerializedName(SERIALIZED_NAME_CAPTURES)
  private List<Capture> captures = null;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<Refund> refunds = null;

  public PaymentCollection() {
  }

  public PaymentCollection authorizations(List<AuthorizationWithAdditionalData> authorizations) {
    
    
    
    
    this.authorizations = authorizations;
    return this;
  }

  public PaymentCollection addAuthorizationsItem(AuthorizationWithAdditionalData authorizationsItem) {
    if (this.authorizations == null) {
      this.authorizations = new ArrayList<>();
    }
    this.authorizations.add(authorizationsItem);
    return this;
  }

   /**
   * An array of authorized payments for a purchase unit. A purchase unit can have zero or more authorized payments.
   * @return authorizations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of authorized payments for a purchase unit. A purchase unit can have zero or more authorized payments.")

  public List<AuthorizationWithAdditionalData> getAuthorizations() {
    return authorizations;
  }


  public void setAuthorizations(List<AuthorizationWithAdditionalData> authorizations) {
    
    
    
    this.authorizations = authorizations;
  }


  public PaymentCollection captures(List<Capture> captures) {
    
    
    
    
    this.captures = captures;
    return this;
  }

  public PaymentCollection addCapturesItem(Capture capturesItem) {
    if (this.captures == null) {
      this.captures = new ArrayList<>();
    }
    this.captures.add(capturesItem);
    return this;
  }

   /**
   * An array of captured payments for a purchase unit. A purchase unit can have zero or more captured payments.
   * @return captures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of captured payments for a purchase unit. A purchase unit can have zero or more captured payments.")

  public List<Capture> getCaptures() {
    return captures;
  }


  public void setCaptures(List<Capture> captures) {
    
    
    
    this.captures = captures;
  }


  public PaymentCollection refunds(List<Refund> refunds) {
    
    
    
    
    this.refunds = refunds;
    return this;
  }

  public PaymentCollection addRefundsItem(Refund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * An array of refunds for a purchase unit. A purchase unit can have zero or more refunds.
   * @return refunds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of refunds for a purchase unit. A purchase unit can have zero or more refunds.")

  public List<Refund> getRefunds() {
    return refunds;
  }


  public void setRefunds(List<Refund> refunds) {
    
    
    
    this.refunds = refunds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentCollection instance itself
   */
  public PaymentCollection putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCollection paymentCollection = (PaymentCollection) o;
    return Objects.equals(this.authorizations, paymentCollection.authorizations) &&
        Objects.equals(this.captures, paymentCollection.captures) &&
        Objects.equals(this.refunds, paymentCollection.refunds)&&
        Objects.equals(this.additionalProperties, paymentCollection.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizations, captures, refunds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCollection {\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    captures: ").append(toIndentedString(captures)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizations");
    openapiFields.add("captures");
    openapiFields.add("refunds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentCollection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentCollection is not found in the empty JSON string", PaymentCollection.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("authorizations") != null && !jsonObj.get("authorizations").isJsonNull()) {
        JsonArray jsonArrayauthorizations = jsonObj.getAsJsonArray("authorizations");
        if (jsonArrayauthorizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be an array in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
          }

          // validate the optional field `authorizations` (array)
          for (int i = 0; i < jsonArrayauthorizations.size(); i++) {
            AuthorizationWithAdditionalData.validateJsonObject(jsonArrayauthorizations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("captures") != null && !jsonObj.get("captures").isJsonNull()) {
        JsonArray jsonArraycaptures = jsonObj.getAsJsonArray("captures");
        if (jsonArraycaptures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("captures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `captures` to be an array in the JSON string but got `%s`", jsonObj.get("captures").toString()));
          }

          // validate the optional field `captures` (array)
          for (int i = 0; i < jsonArraycaptures.size(); i++) {
            Capture.validateJsonObject(jsonArraycaptures.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            Refund.validateJsonObject(jsonArrayrefunds.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentCollection>() {
           @Override
           public void write(JsonWriter out, PaymentCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentCollection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentCollection instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentCollection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentCollection
  * @throws IOException if the JSON string is invalid with respect to PaymentCollection
  */
  public static PaymentCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentCollection.class);
  }

 /**
  * Convert an instance of PaymentCollection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

