/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NetworkTransactionReference;
import com.konfigthis.client.model.PaymentInitiator;
import com.konfigthis.client.model.StoredPaymentSourcePaymentType;
import com.konfigthis.client.model.StoredPaymentSourceUsageType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Provides additional details to process a payment using a &#x60;payment_source&#x60; that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).&lt;br/&gt;Parameter compatibility:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&#x60;payment_type&#x3D;ONE_TIME&#x60; is compatible only with &#x60;payment_initiator&#x3D;CUSTOMER&#x60;.&lt;/li&gt;&lt;li&gt;&#x60;usage&#x3D;FIRST&#x60; is compatible only with &#x60;payment_initiator&#x3D;CUSTOMER&#x60;.&lt;/li&gt;&lt;li&gt;&#x60;previous_transaction_reference&#x60; or &#x60;previous_network_transaction_reference&#x60; is compatible only with &#x60;payment_initiator&#x3D;MERCHANT&#x60;.&lt;/li&gt;&lt;li&gt;Only one of the parameters - &#x60;previous_transaction_reference&#x60; and &#x60;previous_network_transaction_reference&#x60; - can be present in the request.&lt;/li&gt;&lt;/ul&gt;
 */
@ApiModel(description = "Provides additional details to process a payment using a `payment_source` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`.</li><li>Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.</li></ul>")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StoredPaymentSource {
  public static final String SERIALIZED_NAME_PAYMENT_INITIATOR = "payment_initiator";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INITIATOR)
  private PaymentInitiator paymentInitiator;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private StoredPaymentSourcePaymentType paymentType;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private StoredPaymentSourceUsageType usage = StoredPaymentSourceUsageType.DERIVED;

  public static final String SERIALIZED_NAME_PREVIOUS_NETWORK_TRANSACTION_REFERENCE = "previous_network_transaction_reference";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_NETWORK_TRANSACTION_REFERENCE)
  private NetworkTransactionReference previousNetworkTransactionReference;

  public StoredPaymentSource() {
  }

  public StoredPaymentSource paymentInitiator(PaymentInitiator paymentInitiator) {
    
    
    
    
    this.paymentInitiator = paymentInitiator;
    return this;
  }

   /**
   * Get paymentInitiator
   * @return paymentInitiator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentInitiator getPaymentInitiator() {
    return paymentInitiator;
  }


  public void setPaymentInitiator(PaymentInitiator paymentInitiator) {
    
    
    
    this.paymentInitiator = paymentInitiator;
  }


  public StoredPaymentSource paymentType(StoredPaymentSourcePaymentType paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StoredPaymentSourcePaymentType getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(StoredPaymentSourcePaymentType paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public StoredPaymentSource usage(StoredPaymentSourceUsageType usage) {
    
    
    
    
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StoredPaymentSourceUsageType getUsage() {
    return usage;
  }


  public void setUsage(StoredPaymentSourceUsageType usage) {
    
    
    
    this.usage = usage;
  }


  public StoredPaymentSource previousNetworkTransactionReference(NetworkTransactionReference previousNetworkTransactionReference) {
    
    
    
    
    this.previousNetworkTransactionReference = previousNetworkTransactionReference;
    return this;
  }

   /**
   * Get previousNetworkTransactionReference
   * @return previousNetworkTransactionReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkTransactionReference getPreviousNetworkTransactionReference() {
    return previousNetworkTransactionReference;
  }


  public void setPreviousNetworkTransactionReference(NetworkTransactionReference previousNetworkTransactionReference) {
    
    
    
    this.previousNetworkTransactionReference = previousNetworkTransactionReference;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StoredPaymentSource instance itself
   */
  public StoredPaymentSource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredPaymentSource storedPaymentSource = (StoredPaymentSource) o;
    return Objects.equals(this.paymentInitiator, storedPaymentSource.paymentInitiator) &&
        Objects.equals(this.paymentType, storedPaymentSource.paymentType) &&
        Objects.equals(this.usage, storedPaymentSource.usage) &&
        Objects.equals(this.previousNetworkTransactionReference, storedPaymentSource.previousNetworkTransactionReference)&&
        Objects.equals(this.additionalProperties, storedPaymentSource.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentInitiator, paymentType, usage, previousNetworkTransactionReference, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredPaymentSource {\n");
    sb.append("    paymentInitiator: ").append(toIndentedString(paymentInitiator)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    previousNetworkTransactionReference: ").append(toIndentedString(previousNetworkTransactionReference)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payment_initiator");
    openapiFields.add("payment_type");
    openapiFields.add("usage");
    openapiFields.add("previous_network_transaction_reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payment_initiator");
    openapiRequiredFields.add("payment_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StoredPaymentSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StoredPaymentSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoredPaymentSource is not found in the empty JSON string", StoredPaymentSource.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoredPaymentSource.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `previous_network_transaction_reference`
      if (jsonObj.get("previous_network_transaction_reference") != null && !jsonObj.get("previous_network_transaction_reference").isJsonNull()) {
        NetworkTransactionReference.validateJsonObject(jsonObj.getAsJsonObject("previous_network_transaction_reference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoredPaymentSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoredPaymentSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoredPaymentSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoredPaymentSource.class));

       return (TypeAdapter<T>) new TypeAdapter<StoredPaymentSource>() {
           @Override
           public void write(JsonWriter out, StoredPaymentSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StoredPaymentSource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StoredPaymentSource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StoredPaymentSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StoredPaymentSource
  * @throws IOException if the JSON string is invalid with respect to StoredPaymentSource
  */
  public static StoredPaymentSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoredPaymentSource.class);
  }

 /**
  * Convert an instance of StoredPaymentSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

