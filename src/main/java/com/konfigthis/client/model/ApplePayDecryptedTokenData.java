/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplePayPaymentData;
import com.konfigthis.client.model.Card;
import com.konfigthis.client.model.Money2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the Payment data obtained by decrypting Apple Pay token.
 */
@ApiModel(description = "Information about the Payment data obtained by decrypting Apple Pay token.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplePayDecryptedTokenData {
  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transaction_amount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private Money2 transactionAmount;

  public static final String SERIALIZED_NAME_TOKENIZED_CARD = "tokenized_card";
  @SerializedName(SERIALIZED_NAME_TOKENIZED_CARD)
  private Card tokenizedCard;

  public static final String SERIALIZED_NAME_DEVICE_MANUFACTURER_ID = "device_manufacturer_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_MANUFACTURER_ID)
  private String deviceManufacturerId;

  /**
   * Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.
   */
  @JsonAdapter(PaymentDataTypeEnum.Adapter.class)
 public enum PaymentDataTypeEnum {
    _3DSECURE("3DSECURE"),
    
    EMV("EMV");

    private String value;

    PaymentDataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentDataTypeEnum fromValue(String value) {
      for (PaymentDataTypeEnum b : PaymentDataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentDataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentDataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentDataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentDataTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_DATA_TYPE = "payment_data_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATA_TYPE)
  private PaymentDataTypeEnum paymentDataType;

  public static final String SERIALIZED_NAME_PAYMENT_DATA = "payment_data";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATA)
  private ApplePayPaymentData paymentData;

  public ApplePayDecryptedTokenData() {
  }

  public ApplePayDecryptedTokenData transactionAmount(Money2 transactionAmount) {
    
    
    
    
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Get transactionAmount
   * @return transactionAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money2 getTransactionAmount() {
    return transactionAmount;
  }


  public void setTransactionAmount(Money2 transactionAmount) {
    
    
    
    this.transactionAmount = transactionAmount;
  }


  public ApplePayDecryptedTokenData tokenizedCard(Card tokenizedCard) {
    
    
    
    
    this.tokenizedCard = tokenizedCard;
    return this;
  }

   /**
   * Get tokenizedCard
   * @return tokenizedCard
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Card getTokenizedCard() {
    return tokenizedCard;
  }


  public void setTokenizedCard(Card tokenizedCard) {
    
    
    
    this.tokenizedCard = tokenizedCard;
  }


  public ApplePayDecryptedTokenData deviceManufacturerId(String deviceManufacturerId) {
    
    
    if (deviceManufacturerId != null && deviceManufacturerId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for deviceManufacturerId. Length must be greater than or equal to 1.");
    }
    
    this.deviceManufacturerId = deviceManufacturerId;
    return this;
  }

   /**
   * Apple Pay Hex-encoded device manufacturer identifier. The pattern is defined by an external party and supports Unicode.
   * @return deviceManufacturerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Apple Pay Hex-encoded device manufacturer identifier. The pattern is defined by an external party and supports Unicode.")

  public String getDeviceManufacturerId() {
    return deviceManufacturerId;
  }


  public void setDeviceManufacturerId(String deviceManufacturerId) {
    
    
    if (deviceManufacturerId != null && deviceManufacturerId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for deviceManufacturerId. Length must be greater than or equal to 1.");
    }
    this.deviceManufacturerId = deviceManufacturerId;
  }


  public ApplePayDecryptedTokenData paymentDataType(PaymentDataTypeEnum paymentDataType) {
    
    
    if (paymentDataType != null && paymentDataType.length() < 1) {
      throw new IllegalArgumentException("Invalid value for paymentDataType. Length must be greater than or equal to 1.");
    }
    
    this.paymentDataType = paymentDataType;
    return this;
  }

   /**
   * Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.
   * @return paymentDataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.")

  public PaymentDataTypeEnum getPaymentDataType() {
    return paymentDataType;
  }


  public void setPaymentDataType(PaymentDataTypeEnum paymentDataType) {
    
    
    if (paymentDataType != null && paymentDataType.length() < 1) {
      throw new IllegalArgumentException("Invalid value for paymentDataType. Length must be greater than or equal to 1.");
    }
    this.paymentDataType = paymentDataType;
  }


  public ApplePayDecryptedTokenData paymentData(ApplePayPaymentData paymentData) {
    
    
    
    
    this.paymentData = paymentData;
    return this;
  }

   /**
   * Get paymentData
   * @return paymentData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplePayPaymentData getPaymentData() {
    return paymentData;
  }


  public void setPaymentData(ApplePayPaymentData paymentData) {
    
    
    
    this.paymentData = paymentData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplePayDecryptedTokenData instance itself
   */
  public ApplePayDecryptedTokenData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplePayDecryptedTokenData applePayDecryptedTokenData = (ApplePayDecryptedTokenData) o;
    return Objects.equals(this.transactionAmount, applePayDecryptedTokenData.transactionAmount) &&
        Objects.equals(this.tokenizedCard, applePayDecryptedTokenData.tokenizedCard) &&
        Objects.equals(this.deviceManufacturerId, applePayDecryptedTokenData.deviceManufacturerId) &&
        Objects.equals(this.paymentDataType, applePayDecryptedTokenData.paymentDataType) &&
        Objects.equals(this.paymentData, applePayDecryptedTokenData.paymentData)&&
        Objects.equals(this.additionalProperties, applePayDecryptedTokenData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionAmount, tokenizedCard, deviceManufacturerId, paymentDataType, paymentData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplePayDecryptedTokenData {\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    tokenizedCard: ").append(toIndentedString(tokenizedCard)).append("\n");
    sb.append("    deviceManufacturerId: ").append(toIndentedString(deviceManufacturerId)).append("\n");
    sb.append("    paymentDataType: ").append(toIndentedString(paymentDataType)).append("\n");
    sb.append("    paymentData: ").append(toIndentedString(paymentData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_amount");
    openapiFields.add("tokenized_card");
    openapiFields.add("device_manufacturer_id");
    openapiFields.add("payment_data_type");
    openapiFields.add("payment_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tokenized_card");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplePayDecryptedTokenData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplePayDecryptedTokenData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplePayDecryptedTokenData is not found in the empty JSON string", ApplePayDecryptedTokenData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplePayDecryptedTokenData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `transaction_amount`
      if (jsonObj.get("transaction_amount") != null && !jsonObj.get("transaction_amount").isJsonNull()) {
        Money2.validateJsonObject(jsonObj.getAsJsonObject("transaction_amount"));
      }
      // validate the required field `tokenized_card`
      Card.validateJsonObject(jsonObj.getAsJsonObject("tokenized_card"));
      if ((jsonObj.get("device_manufacturer_id") != null && !jsonObj.get("device_manufacturer_id").isJsonNull()) && !jsonObj.get("device_manufacturer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_manufacturer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_manufacturer_id").toString()));
      }
      if ((jsonObj.get("payment_data_type") != null && !jsonObj.get("payment_data_type").isJsonNull()) && !jsonObj.get("payment_data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_data_type").toString()));
      }
      // validate the optional field `payment_data`
      if (jsonObj.get("payment_data") != null && !jsonObj.get("payment_data").isJsonNull()) {
        ApplePayPaymentData.validateJsonObject(jsonObj.getAsJsonObject("payment_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplePayDecryptedTokenData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplePayDecryptedTokenData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplePayDecryptedTokenData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplePayDecryptedTokenData.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplePayDecryptedTokenData>() {
           @Override
           public void write(JsonWriter out, ApplePayDecryptedTokenData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplePayDecryptedTokenData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplePayDecryptedTokenData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplePayDecryptedTokenData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplePayDecryptedTokenData
  * @throws IOException if the JSON string is invalid with respect to ApplePayDecryptedTokenData
  */
  public static ApplePayDecryptedTokenData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplePayDecryptedTokenData.class);
  }

 /**
  * Convert an instance of ApplePayDecryptedTokenData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

