/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Patch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TrackersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrackersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TrackersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call updateTrackingInfoCall(String id, String trackerId, List<Patch> patch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patch;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}/trackers/{tracker_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tracker_id" + "}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackingInfoValidateBeforeCall(String id, String trackerId, List<Patch> patch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTrackingInfo(Async)");
        }

        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling updateTrackingInfo(Async)");
        }

        return updateTrackingInfoCall(id, trackerId, patch, _callback);

    }


    private ApiResponse<Void> updateTrackingInfoWithHttpInfo(String id, String trackerId, List<Patch> patch) throws ApiException {
        okhttp3.Call localVarCall = updateTrackingInfoValidateBeforeCall(id, trackerId, patch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTrackingInfoAsync(String id, String trackerId, List<Patch> patch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrackingInfoValidateBeforeCall(id, trackerId, patch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTrackingInfoRequestBuilder {
        private final String id;
        private final String trackerId;
        private List<Patch> patch;

        private UpdateTrackingInfoRequestBuilder(String id, String trackerId) {
            this.id = id;
            this.trackerId = trackerId;
        }

        /**
         * Set patch
         * @param patch  (optional)
         * @return UpdateTrackingInfoRequestBuilder
         */
        public UpdateTrackingInfoRequestBuilder patch(List<Patch> patch) {
            this.patch = patch;
            return this;
        }

        /**
         * Build call for updateTrackingInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<Patch> patch = buildBodyParams();
            return updateTrackingInfoCall(id, trackerId, patch, _callback);
        }

        private List<Patch> buildBodyParams() {
            return this.patch;
        }

        /**
         * Execute updateTrackingInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<Patch> patch = buildBodyParams();
            updateTrackingInfoWithHttpInfo(id, trackerId, patch);
        }

        /**
         * Execute updateTrackingInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<Patch> patch = buildBodyParams();
            return updateTrackingInfoWithHttpInfo(id, trackerId, patch);
        }

        /**
         * Execute updateTrackingInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<Patch> patch = buildBodyParams();
            return updateTrackingInfoAsync(id, trackerId, patch, _callback);
        }
    }

    /**
     * Update or cancel tracking information for a PayPal order
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Using replace op for &lt;code&gt;items&lt;/code&gt; will replace the entire &lt;code&gt;items&lt;/code&gt; object with the value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;notify_payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Only patching status to CANCELLED is currently supported.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @param trackerId The order tracking ID. (required)
     * @return UpdateTrackingInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTrackingInfoRequestBuilder updateTrackingInfo(String id, String trackerId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (trackerId == null) throw new IllegalArgumentException("\"trackerId\" is required but got null");
            if (trackerId != null && trackerId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for trackerId. Length must be greater than or equal to 1.");
            }

        return new UpdateTrackingInfoRequestBuilder(id, trackerId);
    }
}
