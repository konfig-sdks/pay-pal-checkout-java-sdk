/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CheckoutPaymentIntent;
import com.konfigthis.client.model.ConfirmOrderRequest;
import com.konfigthis.client.model.Order;
import com.konfigthis.client.model.OrderApplicationContext;
import com.konfigthis.client.model.OrderAuthorizeRequest;
import com.konfigthis.client.model.OrderAuthorizeResponse;
import com.konfigthis.client.model.OrderCaptureRequest;
import com.konfigthis.client.model.OrderConfirmApplicationContext;
import com.konfigthis.client.model.OrderRequest;
import com.konfigthis.client.model.OrderTrackerRequest;
import com.konfigthis.client.model.Patch;
import com.konfigthis.client.model.Payer;
import com.konfigthis.client.model.PaymentSource;
import com.konfigthis.client.model.ProcessingInstruction;
import com.konfigthis.client.model.PurchaseUnitRequest;
import com.konfigthis.client.model.ShipmentCarrier;
import com.konfigthis.client.model.ShipmentTrackingNumberType;
import com.konfigthis.client.model.ShipmentTrackingStatus;
import com.konfigthis.client.model.TrackerItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrdersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTrackingInformationCall(String id, OrderTrackerRequest orderTrackerRequest, String payPalAuthAssertion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderTrackerRequest;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}/track"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalAuthAssertion != null) {
            localVarHeaderParams.put("PayPal-Auth-Assertion", localVarApiClient.parameterToString(payPalAuthAssertion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTrackingInformationValidateBeforeCall(String id, OrderTrackerRequest orderTrackerRequest, String payPalAuthAssertion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addTrackingInformation(Async)");
        }

        // verify the required parameter 'orderTrackerRequest' is set
        if (orderTrackerRequest == null) {
            throw new ApiException("Missing the required parameter 'orderTrackerRequest' when calling addTrackingInformation(Async)");
        }

        return addTrackingInformationCall(id, orderTrackerRequest, payPalAuthAssertion, _callback);

    }


    private ApiResponse<Order> addTrackingInformationWithHttpInfo(String id, OrderTrackerRequest orderTrackerRequest, String payPalAuthAssertion) throws ApiException {
        okhttp3.Call localVarCall = addTrackingInformationValidateBeforeCall(id, orderTrackerRequest, payPalAuthAssertion, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTrackingInformationAsync(String id, OrderTrackerRequest orderTrackerRequest, String payPalAuthAssertion, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTrackingInformationValidateBeforeCall(id, orderTrackerRequest, payPalAuthAssertion, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTrackingInformationRequestBuilder {
        private final String id;
        private String transactionId;
        private String trackingNumber;
        private ShipmentTrackingNumberType trackingNumberType;
        private ShipmentTrackingStatus status;
        private String shipmentDate;
        private ShipmentCarrier carrier;
        private String carrierNameOther;
        private String postagePaymentId;
        private Boolean notifyBuyer;
        private Integer quantity;
        private Boolean trackingNumberValidated;
        private String lastUpdatedTime;
        private String shipmentDirection;
        private String shipmentUploader;
        private String captureId;
        private Boolean notifyPayer;
        private List<TrackerItem> items;
        private String payPalAuthAssertion;

        private AddTrackingInformationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set transactionId
         * @param transactionId The PayPal transaction ID. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder transactionId(String transactionId) {
            this.transactionId = transactionId;
            return this;
        }
        
        /**
         * Set trackingNumber
         * @param trackingNumber The tracking number for the shipment. This property supports Unicode. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder trackingNumber(String trackingNumber) {
            this.trackingNumber = trackingNumber;
            return this;
        }
        
        /**
         * Set trackingNumberType
         * @param trackingNumberType  (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder trackingNumberType(ShipmentTrackingNumberType trackingNumberType) {
            this.trackingNumberType = trackingNumberType;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder status(ShipmentTrackingStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set shipmentDate
         * @param shipmentDate The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder shipmentDate(String shipmentDate) {
            this.shipmentDate = shipmentDate;
            return this;
        }
        
        /**
         * Set carrier
         * @param carrier  (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder carrier(ShipmentCarrier carrier) {
            this.carrier = carrier;
            return this;
        }
        
        /**
         * Set carrierNameOther
         * @param carrierNameOther The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder carrierNameOther(String carrierNameOther) {
            this.carrierNameOther = carrierNameOther;
            return this;
        }
        
        /**
         * Set postagePaymentId
         * @param postagePaymentId The postage payment ID. This property supports Unicode. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder postagePaymentId(String postagePaymentId) {
            this.postagePaymentId = postagePaymentId;
            return this;
        }
        
        /**
         * Set notifyBuyer
         * @param notifyBuyer If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API. (optional, default to false)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder notifyBuyer(Boolean notifyBuyer) {
            this.notifyBuyer = notifyBuyer;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity The quantity of items shipped. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set trackingNumberValidated
         * @param trackingNumberValidated Indicates whether the carrier validated the tracking number. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder trackingNumberValidated(Boolean trackingNumberValidated) {
            this.trackingNumberValidated = trackingNumberValidated;
            return this;
        }
        
        /**
         * Set lastUpdatedTime
         * @param lastUpdatedTime The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The regular expression provides guidance but does not reject all invalid dates.&lt;/blockquote&gt; (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder lastUpdatedTime(String lastUpdatedTime) {
            this.lastUpdatedTime = lastUpdatedTime;
            return this;
        }
        
        /**
         * Set shipmentDirection
         * @param shipmentDirection To denote whether the shipment is sent forward to the receiver or returned back. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder shipmentDirection(String shipmentDirection) {
            this.shipmentDirection = shipmentDirection;
            return this;
        }
        
        /**
         * Set shipmentUploader
         * @param shipmentUploader To denote which party uploaded the shipment tracking info. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder shipmentUploader(String shipmentUploader) {
            this.shipmentUploader = shipmentUploader;
            return this;
        }
        
        /**
         * Set captureId
         * @param captureId The PayPal capture ID. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder captureId(String captureId) {
            this.captureId = captureId;
            return this;
        }
        
        /**
         * Set notifyPayer
         * @param notifyPayer If true, sends an email notification to the payer of the PayPal transaction. The email contains the tracking information that was uploaded through the API. (optional, default to false)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder notifyPayer(Boolean notifyPayer) {
            this.notifyPayer = notifyPayer;
            return this;
        }
        
        /**
         * Set items
         * @param items An array of details of items in the shipment. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder items(List<TrackerItem> items) {
            this.items = items;
            return this;
        }
        
        /**
         * Set payPalAuthAssertion
         * @param payPalAuthAssertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
         * @return AddTrackingInformationRequestBuilder
         */
        public AddTrackingInformationRequestBuilder payPalAuthAssertion(String payPalAuthAssertion) {
            this.payPalAuthAssertion = payPalAuthAssertion;
            return this;
        }
        
        /**
         * Build call for addTrackingInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows tracker details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows tracker details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderTrackerRequest orderTrackerRequest = buildBodyParams();
            return addTrackingInformationCall(id, orderTrackerRequest, payPalAuthAssertion, _callback);
        }

        private OrderTrackerRequest buildBodyParams() {
            OrderTrackerRequest orderTrackerRequest = new OrderTrackerRequest();
            return orderTrackerRequest;
        }

        /**
         * Execute addTrackingInformation request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows tracker details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows tracker details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            OrderTrackerRequest orderTrackerRequest = buildBodyParams();
            ApiResponse<Order> localVarResp = addTrackingInformationWithHttpInfo(id, orderTrackerRequest, payPalAuthAssertion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTrackingInformation request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows tracker details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows tracker details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            OrderTrackerRequest orderTrackerRequest = buildBodyParams();
            return addTrackingInformationWithHttpInfo(id, orderTrackerRequest, payPalAuthAssertion);
        }

        /**
         * Execute addTrackingInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows tracker details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows tracker details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            OrderTrackerRequest orderTrackerRequest = buildBodyParams();
            return addTrackingInformationAsync(id, orderTrackerRequest, payPalAuthAssertion, _callback);
        }
    }

    /**
     * Add tracking information for an Order.
     * Adds tracking information for an Order.
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @param orderTrackerRequest  (required)
     * @return AddTrackingInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows tracker details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows tracker details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public AddTrackingInformationRequestBuilder addTrackingInformation(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        return new AddTrackingInformationRequestBuilder(id);
    }
    private okhttp3.Call authorizePaymentOrderCall(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderAuthorizeRequest orderAuthorizeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderAuthorizeRequest;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}/authorize"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalRequestId != null) {
            localVarHeaderParams.put("PayPal-Request-Id", localVarApiClient.parameterToString(payPalRequestId));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        if (payPalClientMetadataId != null) {
            localVarHeaderParams.put("PayPal-Client-Metadata-Id", localVarApiClient.parameterToString(payPalClientMetadataId));
        }

        if (payPalAuthAssertion != null) {
            localVarHeaderParams.put("PayPal-Auth-Assertion", localVarApiClient.parameterToString(payPalAuthAssertion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizePaymentOrderValidateBeforeCall(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderAuthorizeRequest orderAuthorizeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizePaymentOrder(Async)");
        }

        return authorizePaymentOrderCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest, _callback);

    }


    private ApiResponse<OrderAuthorizeResponse> authorizePaymentOrderWithHttpInfo(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderAuthorizeRequest orderAuthorizeRequest) throws ApiException {
        okhttp3.Call localVarCall = authorizePaymentOrderValidateBeforeCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest, null);
        Type localVarReturnType = new TypeToken<OrderAuthorizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authorizePaymentOrderAsync(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderAuthorizeRequest orderAuthorizeRequest, final ApiCallback<OrderAuthorizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizePaymentOrderValidateBeforeCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest, _callback);
        Type localVarReturnType = new TypeToken<OrderAuthorizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthorizePaymentOrderRequestBuilder {
        private final String id;
        private PaymentSource paymentSource;
        private String payPalRequestId;
        private String prefer;
        private String payPalClientMetadataId;
        private String payPalAuthAssertion;

        private AuthorizePaymentOrderRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set paymentSource
         * @param paymentSource  (optional)
         * @return AuthorizePaymentOrderRequestBuilder
         */
        public AuthorizePaymentOrderRequestBuilder paymentSource(PaymentSource paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }
        
        /**
         * Set payPalRequestId
         * @param payPalRequestId The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
         * @return AuthorizePaymentOrderRequestBuilder
         */
        public AuthorizePaymentOrderRequestBuilder payPalRequestId(String payPalRequestId) {
            this.payPalRequestId = payPalRequestId;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return AuthorizePaymentOrderRequestBuilder
         */
        public AuthorizePaymentOrderRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Set payPalClientMetadataId
         * @param payPalClientMetadataId  (optional)
         * @return AuthorizePaymentOrderRequestBuilder
         */
        public AuthorizePaymentOrderRequestBuilder payPalClientMetadataId(String payPalClientMetadataId) {
            this.payPalClientMetadataId = payPalClientMetadataId;
            return this;
        }
        
        /**
         * Set payPalAuthAssertion
         * @param payPalAuthAssertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
         * @return AuthorizePaymentOrderRequestBuilder
         */
        public AuthorizePaymentOrderRequestBuilder payPalAuthAssertion(String payPalAuthAssertion) {
            this.payPalAuthAssertion = payPalAuthAssertion;
            return this;
        }
        
        /**
         * Build call for authorizePaymentOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows authorized payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows authorized payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderAuthorizeRequest orderAuthorizeRequest = buildBodyParams();
            return authorizePaymentOrderCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest, _callback);
        }

        private OrderAuthorizeRequest buildBodyParams() {
            OrderAuthorizeRequest orderAuthorizeRequest = new OrderAuthorizeRequest();
            orderAuthorizeRequest.paymentSource(this.paymentSource);
            return orderAuthorizeRequest;
        }

        /**
         * Execute authorizePaymentOrder request
         * @return OrderAuthorizeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows authorized payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows authorized payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public OrderAuthorizeResponse execute() throws ApiException {
            OrderAuthorizeRequest orderAuthorizeRequest = buildBodyParams();
            ApiResponse<OrderAuthorizeResponse> localVarResp = authorizePaymentOrderWithHttpInfo(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authorizePaymentOrder request with HTTP info returned
         * @return ApiResponse&lt;OrderAuthorizeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows authorized payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows authorized payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrderAuthorizeResponse> executeWithHttpInfo() throws ApiException {
            OrderAuthorizeRequest orderAuthorizeRequest = buildBodyParams();
            return authorizePaymentOrderWithHttpInfo(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest);
        }

        /**
         * Execute authorizePaymentOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows authorized payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows authorized payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrderAuthorizeResponse> _callback) throws ApiException {
            OrderAuthorizeRequest orderAuthorizeRequest = buildBodyParams();
            return authorizePaymentOrderAsync(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderAuthorizeRequest, _callback);
        }
    }

    /**
     * Authorize payment for order
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#authorize-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @return AuthorizePaymentOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows authorized payment details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows authorized payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizePaymentOrderRequestBuilder authorizePaymentOrder(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        return new AuthorizePaymentOrderRequestBuilder(id);
    }
    private okhttp3.Call capturePaymentCall(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderCaptureRequest orderCaptureRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderCaptureRequest;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}/capture"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalRequestId != null) {
            localVarHeaderParams.put("PayPal-Request-Id", localVarApiClient.parameterToString(payPalRequestId));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        if (payPalClientMetadataId != null) {
            localVarHeaderParams.put("PayPal-Client-Metadata-Id", localVarApiClient.parameterToString(payPalClientMetadataId));
        }

        if (payPalAuthAssertion != null) {
            localVarHeaderParams.put("PayPal-Auth-Assertion", localVarApiClient.parameterToString(payPalAuthAssertion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call capturePaymentValidateBeforeCall(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderCaptureRequest orderCaptureRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling capturePayment(Async)");
        }

        return capturePaymentCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest, _callback);

    }


    private ApiResponse<Order> capturePaymentWithHttpInfo(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderCaptureRequest orderCaptureRequest) throws ApiException {
        okhttp3.Call localVarCall = capturePaymentValidateBeforeCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call capturePaymentAsync(String id, String payPalRequestId, String prefer, String payPalClientMetadataId, String payPalAuthAssertion, OrderCaptureRequest orderCaptureRequest, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = capturePaymentValidateBeforeCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CapturePaymentRequestBuilder {
        private final String id;
        private PaymentSource paymentSource;
        private String payPalRequestId;
        private String prefer;
        private String payPalClientMetadataId;
        private String payPalAuthAssertion;

        private CapturePaymentRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set paymentSource
         * @param paymentSource  (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder paymentSource(PaymentSource paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }
        
        /**
         * Set payPalRequestId
         * @param payPalRequestId The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder payPalRequestId(String payPalRequestId) {
            this.payPalRequestId = payPalRequestId;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Set payPalClientMetadataId
         * @param payPalClientMetadataId  (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder payPalClientMetadataId(String payPalClientMetadataId) {
            this.payPalClientMetadataId = payPalClientMetadataId;
            return this;
        }
        
        /**
         * Set payPalAuthAssertion
         * @param payPalAuthAssertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
         * @return CapturePaymentRequestBuilder
         */
        public CapturePaymentRequestBuilder payPalAuthAssertion(String payPalAuthAssertion) {
            this.payPalAuthAssertion = payPalAuthAssertion;
            return this;
        }
        
        /**
         * Build call for capturePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows captured payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderCaptureRequest orderCaptureRequest = buildBodyParams();
            return capturePaymentCall(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest, _callback);
        }

        private OrderCaptureRequest buildBodyParams() {
            OrderCaptureRequest orderCaptureRequest = new OrderCaptureRequest();
            orderCaptureRequest.paymentSource(this.paymentSource);
            return orderCaptureRequest;
        }

        /**
         * Execute capturePayment request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows captured payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            OrderCaptureRequest orderCaptureRequest = buildBodyParams();
            ApiResponse<Order> localVarResp = capturePaymentWithHttpInfo(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute capturePayment request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows captured payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            OrderCaptureRequest orderCaptureRequest = buildBodyParams();
            return capturePaymentWithHttpInfo(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest);
        }

        /**
         * Execute capturePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows captured payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            OrderCaptureRequest orderCaptureRequest = buildBodyParams();
            return capturePaymentAsync(id, payPalRequestId, prefer, payPalClientMetadataId, payPalAuthAssertion, orderCaptureRequest, _callback);
        }
    }

    /**
     * Capture payment for order
     * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#capture-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @return CapturePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows captured payment details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A successful response to a non-idempotent request returns the HTTP &#x60;201 Created&#x60; status code with a JSON response body that shows captured payment details. If a duplicate response is retried, returns the HTTP &#x60;200 OK&#x60; status code. By default, the response is minimal. If you need the complete resource representation, pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-authorize-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public CapturePaymentRequestBuilder capturePayment(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        return new CapturePaymentRequestBuilder(id);
    }
    private okhttp3.Call confirmPaymentSourceCall(String id, String payPalClientMetadataId, String prefer, ConfirmOrderRequest confirmOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmOrderRequest;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}/confirm-payment-source"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalClientMetadataId != null) {
            localVarHeaderParams.put("PayPal-Client-Metadata-Id", localVarApiClient.parameterToString(payPalClientMetadataId));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPaymentSourceValidateBeforeCall(String id, String payPalClientMetadataId, String prefer, ConfirmOrderRequest confirmOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling confirmPaymentSource(Async)");
        }

        return confirmPaymentSourceCall(id, payPalClientMetadataId, prefer, confirmOrderRequest, _callback);

    }


    private ApiResponse<Order> confirmPaymentSourceWithHttpInfo(String id, String payPalClientMetadataId, String prefer, ConfirmOrderRequest confirmOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = confirmPaymentSourceValidateBeforeCall(id, payPalClientMetadataId, prefer, confirmOrderRequest, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call confirmPaymentSourceAsync(String id, String payPalClientMetadataId, String prefer, ConfirmOrderRequest confirmOrderRequest, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPaymentSourceValidateBeforeCall(id, payPalClientMetadataId, prefer, confirmOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConfirmPaymentSourceRequestBuilder {
        private final PaymentSource paymentSource;
        private final String id;
        private ProcessingInstruction processingInstruction;
        private OrderConfirmApplicationContext applicationContext;
        private String payPalClientMetadataId;
        private String prefer;

        private ConfirmPaymentSourceRequestBuilder(PaymentSource paymentSource, String id) {
            this.paymentSource = paymentSource;
            this.id = id;
        }

        /**
         * Set processingInstruction
         * @param processingInstruction  (optional, default to NO_INSTRUCTION)
         * @return ConfirmPaymentSourceRequestBuilder
         */
        public ConfirmPaymentSourceRequestBuilder processingInstruction(ProcessingInstruction processingInstruction) {
            this.processingInstruction = processingInstruction;
            return this;
        }
        
        /**
         * Set applicationContext
         * @param applicationContext  (optional)
         * @return ConfirmPaymentSourceRequestBuilder
         */
        public ConfirmPaymentSourceRequestBuilder applicationContext(OrderConfirmApplicationContext applicationContext) {
            this.applicationContext = applicationContext;
            return this;
        }
        
        /**
         * Set payPalClientMetadataId
         * @param payPalClientMetadataId  (optional)
         * @return ConfirmPaymentSourceRequestBuilder
         */
        public ConfirmPaymentSourceRequestBuilder payPalClientMetadataId(String payPalClientMetadataId) {
            this.payPalClientMetadataId = payPalClientMetadataId;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return ConfirmPaymentSourceRequestBuilder
         */
        public ConfirmPaymentSourceRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Build call for confirmPaymentSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConfirmOrderRequest confirmOrderRequest = buildBodyParams();
            return confirmPaymentSourceCall(id, payPalClientMetadataId, prefer, confirmOrderRequest, _callback);
        }

        private ConfirmOrderRequest buildBodyParams() {
            ConfirmOrderRequest confirmOrderRequest = new ConfirmOrderRequest();
            confirmOrderRequest.paymentSource(this.paymentSource);
            confirmOrderRequest.processingInstruction(this.processingInstruction);
            confirmOrderRequest.applicationContext(this.applicationContext);
            return confirmOrderRequest;
        }

        /**
         * Execute confirmPaymentSource request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            ConfirmOrderRequest confirmOrderRequest = buildBodyParams();
            ApiResponse<Order> localVarResp = confirmPaymentSourceWithHttpInfo(id, payPalClientMetadataId, prefer, confirmOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute confirmPaymentSource request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            ConfirmOrderRequest confirmOrderRequest = buildBodyParams();
            return confirmPaymentSourceWithHttpInfo(id, payPalClientMetadataId, prefer, confirmOrderRequest);
        }

        /**
         * Execute confirmPaymentSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            ConfirmOrderRequest confirmOrderRequest = buildBodyParams();
            return confirmPaymentSourceAsync(id, payPalClientMetadataId, prefer, confirmOrderRequest, _callback);
        }
    }

    /**
     * Confirm the Order
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @return ConfirmPaymentSourceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmPaymentSourceRequestBuilder confirmPaymentSource(PaymentSource paymentSource, String id) throws IllegalArgumentException {
        if (paymentSource == null) throw new IllegalArgumentException("\"paymentSource\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        return new ConfirmPaymentSourceRequestBuilder(paymentSource, id);
    }
    private okhttp3.Call createOrderCall(OrderRequest orderRequest, String payPalRequestId, String payPalPartnerAttributionId, String payPalClientMetadataId, String prefer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderRequest;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payPalRequestId != null) {
            localVarHeaderParams.put("PayPal-Request-Id", localVarApiClient.parameterToString(payPalRequestId));
        }

        if (payPalPartnerAttributionId != null) {
            localVarHeaderParams.put("PayPal-Partner-Attribution-Id", localVarApiClient.parameterToString(payPalPartnerAttributionId));
        }

        if (payPalClientMetadataId != null) {
            localVarHeaderParams.put("PayPal-Client-Metadata-Id", localVarApiClient.parameterToString(payPalClientMetadataId));
        }

        if (prefer != null) {
            localVarHeaderParams.put("Prefer", localVarApiClient.parameterToString(prefer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(OrderRequest orderRequest, String payPalRequestId, String payPalPartnerAttributionId, String payPalClientMetadataId, String prefer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderRequest' is set
        if (orderRequest == null) {
            throw new ApiException("Missing the required parameter 'orderRequest' when calling createOrder(Async)");
        }

        return createOrderCall(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer, _callback);

    }


    private ApiResponse<Order> createOrderWithHttpInfo(OrderRequest orderRequest, String payPalRequestId, String payPalPartnerAttributionId, String payPalClientMetadataId, String prefer) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrderAsync(OrderRequest orderRequest, String payPalRequestId, String payPalPartnerAttributionId, String payPalClientMetadataId, String prefer, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrderRequestBuilder {
        private final CheckoutPaymentIntent intent;
        private final List<PurchaseUnitRequest> purchaseUnits;
        private Payer payer;
        private PaymentSource paymentSource;
        private OrderApplicationContext applicationContext;
        private String payPalRequestId;
        private String payPalPartnerAttributionId;
        private String payPalClientMetadataId;
        private String prefer;

        private CreateOrderRequestBuilder(CheckoutPaymentIntent intent, List<PurchaseUnitRequest> purchaseUnits) {
            this.intent = intent;
            this.purchaseUnits = purchaseUnits;
        }

        /**
         * Set payer
         * @param payer  (optional)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder payer(Payer payer) {
            this.payer = payer;
            return this;
        }
        
        /**
         * Set paymentSource
         * @param paymentSource  (optional)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder paymentSource(PaymentSource paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }
        
        /**
         * Set applicationContext
         * @param applicationContext  (optional)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder applicationContext(OrderApplicationContext applicationContext) {
            this.applicationContext = applicationContext;
            return this;
        }
        
        /**
         * Set payPalRequestId
         * @param payPalRequestId The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder payPalRequestId(String payPalRequestId) {
            this.payPalRequestId = payPalRequestId;
            return this;
        }
        
        /**
         * Set payPalPartnerAttributionId
         * @param payPalPartnerAttributionId  (optional)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder payPalPartnerAttributionId(String payPalPartnerAttributionId) {
            this.payPalPartnerAttributionId = payPalPartnerAttributionId;
            return this;
        }
        
        /**
         * Set payPalClientMetadataId
         * @param payPalClientMetadataId  (optional)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder payPalClientMetadataId(String payPalClientMetadataId) {
            this.payPalClientMetadataId = payPalClientMetadataId;
            return this;
        }
        
        /**
         * Set prefer
         * @param prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to return&#x3D;minimal)
         * @return CreateOrderRequestBuilder
         */
        public CreateOrderRequestBuilder prefer(String prefer) {
            this.prefer = prefer;
            return this;
        }
        
        /**
         * Build call for createOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code and a JSON response body that includes by default a minimal response with the ID, status, and HATEOAS links. If you require the complete order resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-create-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. This header value is not the default. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderRequest orderRequest = buildBodyParams();
            return createOrderCall(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer, _callback);
        }

        private OrderRequest buildBodyParams() {
            OrderRequest orderRequest = new OrderRequest();
            orderRequest.intent(this.intent);
            orderRequest.payer(this.payer);
            orderRequest.purchaseUnits(this.purchaseUnits);
            orderRequest.paymentSource(this.paymentSource);
            orderRequest.applicationContext(this.applicationContext);
            return orderRequest;
        }

        /**
         * Execute createOrder request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code and a JSON response body that includes by default a minimal response with the ID, status, and HATEOAS links. If you require the complete order resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-create-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. This header value is not the default. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            OrderRequest orderRequest = buildBodyParams();
            ApiResponse<Order> localVarResp = createOrderWithHttpInfo(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrder request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code and a JSON response body that includes by default a minimal response with the ID, status, and HATEOAS links. If you require the complete order resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-create-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. This header value is not the default. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            OrderRequest orderRequest = buildBodyParams();
            return createOrderWithHttpInfo(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer);
        }

        /**
         * Execute createOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code and a JSON response body that includes by default a minimal response with the ID, status, and HATEOAS links. If you require the complete order resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-create-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. This header value is not the default. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            OrderRequest orderRequest = buildBodyParams();
            return createOrderAsync(orderRequest, payPalRequestId, payPalPartnerAttributionId, payPalClientMetadataId, prefer, _callback);
        }
    }

    /**
     * Create order
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/checkout/advanced/processing/\&quot;&gt;checkout&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\&quot;&gt;multiparty checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#create-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     * @param orderRequest  (required)
     * @return CreateOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response to an idempotent request returns the HTTP &#x60;200 OK&#x60; status code with a JSON response body that shows order details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A successful request returns the HTTP &#x60;201 Created&#x60; status code and a JSON response body that includes by default a minimal response with the ID, status, and HATEOAS links. If you require the complete order resource representation, you must pass the &lt;a href&#x3D;\&quot;/docs/api/orders/v2/#orders-create-header-parameters\&quot;&gt;&lt;code&gt;Prefer: return&#x3D;representation&lt;/code&gt; request header&lt;/a&gt;. This header value is not the default. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrderRequestBuilder createOrder(CheckoutPaymentIntent intent, List<PurchaseUnitRequest> purchaseUnits) throws IllegalArgumentException {
        if (intent == null) throw new IllegalArgumentException("\"intent\" is required but got null");
        if (purchaseUnits == null) throw new IllegalArgumentException("\"purchaseUnits\" is required but got null");
        return new CreateOrderRequestBuilder(intent, purchaseUnits);
    }
    private okhttp3.Call showDetailsCall(String id, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(String id, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showDetails(Async)");
        }

        return showDetailsCall(id, fields, _callback);

    }


    private ApiResponse<Order> showDetailsWithHttpInfo(String id, String fields) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(String id, String fields, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final String id;
        private String fields;

        private ShowDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;. (optional)
         * @return ShowDetailsRequestBuilder
         */
        public ShowDetailsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(id, fields, _callback);
        }


        /**
         * Execute showDetails request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            ApiResponse<Order> localVarResp = showDetailsWithHttpInfo(id, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(id, fields);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows order details. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            return showDetailsAsync(id, fields, _callback);
        }
    }

    /**
     * Show order details
     * Shows details for an order, by ID.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#get-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request returns the HTTP &#x60;200 OK&#x60; status code and a JSON response body that shows order details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        return new ShowDetailsRequestBuilder(id);
    }
    private okhttp3.Call updateOrderStatusCall(String id, List<Patch> patch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patch;

        // create path and map variables
        String localVarPath = "/v2/checkout/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderStatusValidateBeforeCall(String id, List<Patch> patch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrderStatus(Async)");
        }

        return updateOrderStatusCall(id, patch, _callback);

    }


    private ApiResponse<Void> updateOrderStatusWithHttpInfo(String id, List<Patch> patch) throws ApiException {
        okhttp3.Call localVarCall = updateOrderStatusValidateBeforeCall(id, patch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateOrderStatusAsync(String id, List<Patch> patch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderStatusValidateBeforeCall(id, patch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateOrderStatusRequestBuilder {
        private final String id;
        private List<Patch> patch;

        private UpdateOrderStatusRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set patch
         * @param patch  (optional)
         * @return UpdateOrderStatusRequestBuilder
         */
        public UpdateOrderStatusRequestBuilder patch(List<Patch> patch) {
            this.patch = patch;
            return this;
        }

        /**
         * Build call for updateOrderStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<Patch> patch = buildBodyParams();
            return updateOrderStatusCall(id, patch, _callback);
        }

        private List<Patch> buildBodyParams() {
            return this.patch;
        }

        /**
         * Execute updateOrderStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<Patch> patch = buildBodyParams();
            updateOrderStatusWithHttpInfo(id, patch);
        }

        /**
         * Execute updateOrderStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<Patch> patch = buildBodyParams();
            return updateOrderStatusWithHttpInfo(id, patch);
        }

        /**
         * Execute updateOrderStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<Patch> patch = buildBodyParams();
            return updateOrderStatusAsync(id, patch, _callback);
        }
    }

    /**
     * Update order
     * Updates an order with a &#x60;CREATED&#x60; or &#x60;APPROVED&#x60; status. You cannot update an order with the &#x60;COMPLETED&#x60; status.&lt;br/&gt;&lt;br/&gt;To make an update, you must provide a &#x60;reference_id&#x60;. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to &#x60;default&#x60; which enables you to use the path: &lt;code&gt;\\\&quot;/purchase_units/@reference_id&#x3D;&#x3D;&#39;default&#39;/{attribute-or-object}\\\&quot;&lt;/code&gt;. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/checkout/advanced/processing/\&quot;&gt;checkout&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\&quot;&gt;multiparty checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\\\&quot;/api/rest/reference/orders/v2/errors/#patch-order\\\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;Patchable attributes or objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;intent&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;Using replace op for &lt;code&gt;payer&lt;/code&gt; will replace the whole &lt;code&gt;payer&lt;/code&gt; object with the value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].custom_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].description&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payee.email&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.address&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].soft_descriptor&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].amount&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].invoice_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.disbursement_mode&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;By default, &lt;code&gt;disbursement_mode&lt;/code&gt; is &lt;code&gt;INSTANT&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.platform_fees&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.airline&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.card&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;application_context.client_configuration&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     * @param id The ID of the order that the tracking information is associated with. (required)
     * @return UpdateOrderStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A successful request returns the HTTP &#x60;204 No Content&#x60; status code with an empty object in the JSON response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The default response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrderStatusRequestBuilder updateOrderStatus(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        return new UpdateOrderStatusRequestBuilder(id);
    }
}
