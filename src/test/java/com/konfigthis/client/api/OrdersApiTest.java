/*
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CheckoutPaymentIntent;
import com.konfigthis.client.model.ConfirmOrderRequest;
import com.konfigthis.client.model.Order;
import com.konfigthis.client.model.OrderApplicationContext;
import com.konfigthis.client.model.OrderAuthorizeRequest;
import com.konfigthis.client.model.OrderAuthorizeResponse;
import com.konfigthis.client.model.OrderCaptureRequest;
import com.konfigthis.client.model.OrderConfirmApplicationContext;
import com.konfigthis.client.model.OrderRequest;
import com.konfigthis.client.model.OrderTrackerRequest;
import com.konfigthis.client.model.Patch;
import com.konfigthis.client.model.Payer;
import com.konfigthis.client.model.PaymentSource;
import com.konfigthis.client.model.ProcessingInstruction;
import com.konfigthis.client.model.PurchaseUnitRequest;
import com.konfigthis.client.model.ShipmentCarrier;
import com.konfigthis.client.model.ShipmentTrackingNumberType;
import com.konfigthis.client.model.ShipmentTrackingStatus;
import com.konfigthis.client.model.TrackerItem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private static OrdersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrdersApi(apiClient);
    }

    /**
     * Add tracking information for an Order.
     *
     * Adds tracking information for an Order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTrackingInformationTest() throws ApiException {
        String id = null;
        String transactionId = null;
        String trackingNumber = null;
        ShipmentTrackingNumberType trackingNumberType = null;
        ShipmentTrackingStatus status = null;
        String shipmentDate = null;
        ShipmentCarrier carrier = null;
        String carrierNameOther = null;
        String postagePaymentId = null;
        Boolean notifyBuyer = null;
        Integer quantity = null;
        Boolean trackingNumberValidated = null;
        String lastUpdatedTime = null;
        String shipmentDirection = null;
        String shipmentUploader = null;
        String captureId = null;
        Boolean notifyPayer = null;
        List<TrackerItem> items = null;
        String payPalAuthAssertion = null;
        Order response = api.addTrackingInformation(id)
                .transactionId(transactionId)
                .trackingNumber(trackingNumber)
                .trackingNumberType(trackingNumberType)
                .status(status)
                .shipmentDate(shipmentDate)
                .carrier(carrier)
                .carrierNameOther(carrierNameOther)
                .postagePaymentId(postagePaymentId)
                .notifyBuyer(notifyBuyer)
                .quantity(quantity)
                .trackingNumberValidated(trackingNumberValidated)
                .lastUpdatedTime(lastUpdatedTime)
                .shipmentDirection(shipmentDirection)
                .shipmentUploader(shipmentUploader)
                .captureId(captureId)
                .notifyPayer(notifyPayer)
                .items(items)
                .payPalAuthAssertion(payPalAuthAssertion)
                .execute();
        // TODO: test validations
    }

    /**
     * Authorize payment for order
     *
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#authorize-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizePaymentOrderTest() throws ApiException {
        String id = null;
        PaymentSource paymentSource = null;
        String payPalRequestId = null;
        String prefer = null;
        String payPalClientMetadataId = null;
        String payPalAuthAssertion = null;
        OrderAuthorizeResponse response = api.authorizePaymentOrder(id)
                .paymentSource(paymentSource)
                .payPalRequestId(payPalRequestId)
                .prefer(prefer)
                .payPalClientMetadataId(payPalClientMetadataId)
                .payPalAuthAssertion(payPalAuthAssertion)
                .execute();
        // TODO: test validations
    }

    /**
     * Capture payment for order
     *
     * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#capture-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void capturePaymentTest() throws ApiException {
        String id = null;
        PaymentSource paymentSource = null;
        String payPalRequestId = null;
        String prefer = null;
        String payPalClientMetadataId = null;
        String payPalAuthAssertion = null;
        Order response = api.capturePayment(id)
                .paymentSource(paymentSource)
                .payPalRequestId(payPalRequestId)
                .prefer(prefer)
                .payPalClientMetadataId(payPalClientMetadataId)
                .payPalAuthAssertion(payPalAuthAssertion)
                .execute();
        // TODO: test validations
    }

    /**
     * Confirm the Order
     *
     * Payer confirms their intent to pay for the the Order with the given payment source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmPaymentSourceTest() throws ApiException {
        PaymentSource paymentSource = null;
        String id = null;
        ProcessingInstruction processingInstruction = null;
        OrderConfirmApplicationContext applicationContext = null;
        String payPalClientMetadataId = null;
        String prefer = null;
        Order response = api.confirmPaymentSource(paymentSource, id)
                .processingInstruction(processingInstruction)
                .applicationContext(applicationContext)
                .payPalClientMetadataId(payPalClientMetadataId)
                .prefer(prefer)
                .execute();
        // TODO: test validations
    }

    /**
     * Create order
     *
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/checkout/advanced/processing/\&quot;&gt;checkout&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\&quot;&gt;multiparty checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#create-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        CheckoutPaymentIntent intent = null;
        List<PurchaseUnitRequest> purchaseUnits = null;
        Payer payer = null;
        PaymentSource paymentSource = null;
        OrderApplicationContext applicationContext = null;
        String payPalRequestId = null;
        String payPalPartnerAttributionId = null;
        String payPalClientMetadataId = null;
        String prefer = null;
        Order response = api.createOrder(intent, purchaseUnits)
                .payer(payer)
                .paymentSource(paymentSource)
                .applicationContext(applicationContext)
                .payPalRequestId(payPalRequestId)
                .payPalPartnerAttributionId(payPalPartnerAttributionId)
                .payPalClientMetadataId(payPalClientMetadataId)
                .prefer(prefer)
                .execute();
        // TODO: test validations
    }

    /**
     * Show order details
     *
     * Shows details for an order, by ID.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\&quot;/api/rest/reference/orders/v2/errors/#get-order\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showDetailsTest() throws ApiException {
        String id = null;
        String fields = null;
        Order response = api.showDetails(id)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update order
     *
     * Updates an order with a &#x60;CREATED&#x60; or &#x60;APPROVED&#x60; status. You cannot update an order with the &#x60;COMPLETED&#x60; status.&lt;br/&gt;&lt;br/&gt;To make an update, you must provide a &#x60;reference_id&#x60;. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to &#x60;default&#x60; which enables you to use the path: &lt;code&gt;\\\&quot;/purchase_units/@reference_id&#x3D;&#x3D;&#39;default&#39;/{attribute-or-object}\\\&quot;&lt;/code&gt;. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/checkout/advanced/processing/\&quot;&gt;checkout&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\&quot;&gt;multiparty checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see &lt;a href&#x3D;\\\&quot;/api/rest/reference/orders/v2/errors/#patch-order\\\&quot;&gt;Orders v2 errors&lt;/a&gt;.&lt;/blockquote&gt;Patchable attributes or objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;intent&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;Using replace op for &lt;code&gt;payer&lt;/code&gt; will replace the whole &lt;code&gt;payer&lt;/code&gt; object with the value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].custom_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].description&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payee.email&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.address&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].soft_descriptor&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].amount&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].invoice_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.disbursement_mode&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;By default, &lt;code&gt;disbursement_mode&lt;/code&gt; is &lt;code&gt;INSTANT&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.platform_fees&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.airline&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.card&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add, remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;application_context.client_configuration&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderStatusTest() throws ApiException {
        String id = null;
        api.updateOrderStatus(id)
                .execute();
        // TODO: test validations
    }

}
